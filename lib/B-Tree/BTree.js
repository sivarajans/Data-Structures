"use strict";function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var descriptor,i=0;i<props.length;i++)descriptor=props[i],descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var BTreeKey=function BTreeKey(key,value){_classCallCheck(this,BTreeKey),this.key=key,this.value=value,this.left=null,this.right=null},BTreeNode=function BTreeNode(){_classCallCheck(this,BTreeNode),this.parent=null,this.keys=[]},BTree=function(){function BTree(order,isLeftBiased){_classCallCheck(this,BTree),this.order=order,this.isLeftBiased=isLeftBiased,this.maxChildren=order,this.maxKeys=this.maxChildren-1,this.minChildren=Math.floor(this.maxChildren/2),this.minKeys=this.minChildren-1,this.root=[],this.size=0}return _createClass(BTree,[{key:"add",value:function add(data){0==this.root.length?this.root.push(this._createNode(this._createKey(data))):this._add(data),this.size++}},{key:"_add",value:function _add(data){var nodeToAdd=this._findNodeToAdd(this.root,data);nodeToAdd.keys.push(this._createKey(data)),nodeToAdd.length<this.maxKeys?this._sortNode(nodeToAdd):this._balanceInsertion(nodeToAdd)}},{key:"_findNodeToAdd",value:function _findNodeToAdd(node,data){if(0==node.keys.filter(function(key){return null!=key.left||null!=key.right}))return node;for(var nearestKey,currentValue,i=0;i<node.keys.length-1;i++)if(currentValue=node.keys[i].value,currentValue<data.value)continue;else return nearestKey=node.keys[i],null==nearestKey.left?node:this._findNodeToAdd(node.keys[i].left);if(null==nearestKey)return nearestKey=node.keys[node.keys.length-1],null==nearestKey.right?node:this._findNodeToAdd(nearestKey.right)}},{key:"_createNode",value:function _createNode(btreeKeysArray,parent){var _BTreeNode$keys,node=(_BTreeNode$keys=new BTreeNode().keys).push.apply(_BTreeNode$keys,_toConsumableArray(btreeKeysArray));return node.parent=parent,node}},{key:"_createKey",value:function _createKey(_ref){var key=_ref.key,value=_ref.value;return new BTreeKey(key,value)}},{key:"_sortNode",value:function _sortNode(node){for(var i=0;i<node.keys.length-2;i++)if(node.keys[i].value>node.keys[i+1].value);}},{key:"_balanceInsertion",value:function _balanceInsertion(node){if(node.keys.length>this.maxKeys){var mid=this._getMidIndex(),newLeftKeys=node.keys.slice(0,mid-1),newRightKeys=node.keys.slice(mid+1),newKey=node.keys.slice(mid,mid);newKey.left=this._createNode(newLeftKeys),newKey.right=this._createNode(newRightKeys);var newNode=this._createNode(newKey);newKey.left.parent=newNode,newKey.right.parent=newNode}}},{key:"_getMidIndex",value:function _getMidIndex(){var isExactMid=1==this.maxKeys%2,mid=Math.floor(this.maxKeys/2);return isExactMid||(mid-=this.isLeftBiased?1:0),mid}}]),BTree}();