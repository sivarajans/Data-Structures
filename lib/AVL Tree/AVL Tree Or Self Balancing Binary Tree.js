"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=exports.TreeNode=void 0;function _defineProperties(target,props){for(var descriptor,i=0;i<props.length;i++)descriptor=props[i],descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var TreeNode=function TreeNode(value){_classCallCheck(this,TreeNode),this.value=value,this.left=null,this.right=null};exports.TreeNode=TreeNode;var SelfBalancedTree=function(){function SelfBalancedTree(array){var _this=this;_classCallCheck(this,SelfBalancedTree),this.root=null,this.size=0,0<(null===array||void 0===array?void 0:array.length)&&array.forEach(function(element){_this.add(element)})}return _createClass(SelfBalancedTree,[{key:"add",value:function add(value){var node=new TreeNode(value);null==this.root?this.root=node:(this._add(this.root,node),this.root=this.balancing(this.root)),this.size++}},{key:"_add",value:function _add(parent,node){node.value<parent.value?null==parent.left?parent.left=node:(this._add(parent.left,node),parent.left=this.balancing(parent.left)):node.value>parent.value&&(null==parent.right?parent.right=node:(this._add(parent.right,node),parent.right=this.balancing(parent.right)))}},{key:"findBalanceFactor",value:function findBalanceFactor(node){if(null==node)return 0;var leftDepth=null==node.left?0:this.depthOfNode(node.left),rightDepth=null==node.right?0:this.depthOfNode(node.right);return rightDepth-leftDepth}},{key:"balancing",value:function balancing(node){var bf=this.findBalanceFactor(node);if(-2==bf){var lf=this.findBalanceFactor(node.left);if(-1>=lf)return this.leftLeftCase(node);if(1<=lf)return this.leftRightCase(node)}else if(2==bf){var rf=this.findBalanceFactor(node.right);if(-1>=rf)return this.rightLeftCase(node);if(1<=rf)return this.rightRightCase(node)}return node}},{key:"depthOfNode",value:function depthOfNode(node){if(null==node)return 0;var leftSide=this.depthOfNode(node.left),rightSide=this.depthOfNode(node.right);return Math.max(leftSide,rightSide)+1}},{key:"leftLeftCase",value:function leftLeftCase(node){return this.rightRotation(node)}},{key:"leftRightCase",value:function leftRightCase(node){return node.left=this.leftRotation(node.left),this.leftLeftCase(node)}},{key:"rightRightCase",value:function rightRightCase(node){return this.leftRotation(node)}},{key:"rightLeftCase",value:function rightLeftCase(node){return node.right=this.rightRotation(node.right),this.rightRightCase(node)}},{key:"rightRotation",value:function rightRotation(node){var newroot=node.left;return node.left=newroot.right,newroot.right=node,newroot}},{key:"leftRotation",value:function leftRotation(node){var newroot=node.right;return node.right=newroot.left,newroot.left=node,newroot}}]),SelfBalancedTree}();exports["default"]=SelfBalancedTree;